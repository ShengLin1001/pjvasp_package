#!/bin/bash
# J. Pei, 2025-05-23
#  >>> dist.pl y_full_relax_neb/ini/CONTCAR y_full_relax_neb/fin/CONTCAR
#  3.117
#  >>> pei_run_neb 6 (3.117/0.8 is a good choice)

main(){
    GREEN='\033[0;32m'
    YELLOW='\033[0;33m'
    BLUE='\033[0;34m'
    NC='\033[0m'

    # =============================
    # --help option
    # =============================
    if [[ "$1" == "--help" || "$1" == "-h" ]]; then
        echo -e "${GREEN}pei_vasp_run_neb${NC} - Generate and prepare NEB images from relaxed endpoints"
        echo ""
        echo -e "${YELLOW}Usage:${NC}"
        echo -e "  $0 ${GREEN}<N_IMAGE>${NC}"
        echo ""
        echo -e "${YELLOW}Description:${NC}"
        echo -e "  - Source folder must be: ${BLUE}y_full_relax_neb${NC}"
        echo -e "  - Must contain: ${GREEN}ini/CONTCAR${NC}, ${GREEN}fin/CONTCAR${NC}"
        echo -e "  - Recommended number of images = DISTANCE / 0.8"
        echo ""
        echo -e "${YELLOW}Example:${NC}"
        echo -e "  dist.pl y_full_relax_neb/ini/CONTCAR y_full_relax_neb/fin/CONTCAR"
        echo -e "  $0 6"
        echo ""
        exit 0
    fi

    script_name=$(basename "$0")
    logfile="${script_name}.log"

    # üìú Log everything to file and terminal
    exec > >(tee "$logfile") 2>&1

    echo -e "üü¢ ===== ${GREEN}Run started${NC} at: $(date) ====="
    echo -e "üìå Command: ${BLUE}$0${NC} $@"
    echo "==============================="

    srcdir0=y_full_relax_neb
    if [ -d "$srcdir0" ]; then
        sub_run_neb $1
    else
        echo -e "‚ùå ${YELLOW}ERROR${NC}: No ${BLUE}$srcdir0${NC} found! Abort!"
        exit
    fi
}

sub_run_neb(){
    myroot=$(pwd)
    srcdir=$myroot/y_full_relax_temp
    rm -rf "$srcdir"

    echo -e "üßπ Copying working directory from ${BLUE}$srcdir0${NC}"
    cp -r "$srcdir0" "$srcdir"
    cd "$srcdir"

    echo "==========================================================="
    echo -e "üìã ${YELLOW}INFO${NC}:"
    echo -e "üìÅ Using ${BLUE}$srcdir0${NC} as reference, and expecting ini/CONTCAR & fin/CONTCAR"
    echo -e "üìÑ Required input: ${GREEN}{INCAR.neb, KPOINTS.neb, sub.*.neb, Y_*.neb}${NC}"
    echo -e "üìè Recommended: run ${BLUE}dist.pl CONTCAR_ini CONTCAR_fin${NC} ‚Üí distance / 0.8"
    echo -e "üí° Example:"
    echo -e "    >>> dist srcdir/ini/CONTCAR srcdir/fin/CONTCAR"
    echo -e "    3.13"
    echo -e "    >>> pei_vasp_run_neb 6"
    echo "==========================================================="

    echo "üîç Checking required CONTCAR files..."
    for myfile in ./ini/CONTCAR ./fin/CONTCAR; do
        if [ -f "$myfile" ]; then
            echo -e "‚úÖ ${GREEN}$myfile exists.${NC}"
        else
            echo -e "‚ùå ${YELLOW}ERROR${NC}: $myfile not found. Not fully relaxed."
            exit 1
        fi
    done

    dirsurf=$myroot/y_neb
    echo -e "üßπ Preparing clean NEB workspace at: ${BLUE}$dirsurf${NC}"
    rm -rI "$dirsurf"
    mkdir "$dirsurf"
    cd "$dirsurf"
    mkdir y_dir
    cd y_dir

    num=$1
    if [[ ! "$num" =~ ^[0-9]+$ ]]; then
        echo -e "‚ùå ${YELLOW}ERROR${NC}: Usage: $0 <non-negative integer>"
        exit 1
    fi

    echo "üìè Running dist.pl to check distance..."
    dist.pl "$srcdir/ini/CONTCAR" "$srcdir/fin/CONTCAR"

    echo "üß¨ Running nebmake.pl to generate $num images..."
    nebmake.pl "$srcdir/ini/CONTCAR" "$srcdir/fin/CONTCAR" "$num"

    echo "üõ°Ô∏è  Running nebavoid.pl to ensure all interatomic distances ‚â• 1 √Ö in the generated NEB images..."
    nebavoid.pl 1

    cp "$srcdir/ini/OUTCAR" OUTCAR.ini
    cp "$srcdir/fin/OUTCAR" OUTCAR.fin

    echo "üéûÔ∏è  Generating movie with pei_vasp_univ_neb_nebmovie..."
    pei_vasp_univ_neb_nebmovie
    mv movie*.xyz "$dirsurf"

    echo "üî¢ Generating image list..."
    arr=()
    for i in $(seq -w 0 $((num + 1))); do
        arr+=("$i")
    done

    echo "üìÇ Checking POSCAR format in each image directory..."
    for val in "${arr[@]}"; do
        dirn=$(printf "%02d" "$val")
        echo "-----------------------------------------------------------"
        echo -e "üìÑ Processing POSCAR in image ${BLUE}$dirn${NC}"
        cd "$dirn"
        head -n 10 POSCAR
        cd ..
    done

    echo "üì¶ Moving OUTCAR files to 00/ and $(printf "%02d" "${arr[-1]}")/"
    dir1=$(printf "%02d" "${arr[0]}")
    dir2=$(printf "%02d" "${arr[-1]}")
    mv OUTCAR.ini $dir1/OUTCAR
    mv OUTCAR.fin $dir2/OUTCAR
    cp $dir1/POSCAR $dir1/CONTCAR
    cp $dir2/POSCAR $dir2/CONTCAR

    echo "üì• Copying input templates from ini/..."
    cp "$srcdir"/ini/{INCAR.neb,KPOINTS.neb,POTCAR,sub.*.neb,Y_*.neb} ./ 2>/dev/null

    echo "‚úÇÔ∏è  Renaming *.neb files to remove extension..."
    for file in ./*.neb; do
        [ -e "$file" ] || continue
        filename=$(basename "$file")
        newname="${filename%.neb}"
        mv "$file" "./$newname"
        echo -e "üîÅ Moved: ${BLUE}$file${NC} => ${GREEN}$newname${NC}"
    done

    echo "üßæ Checking INCAR content:"
    echo "Note: ISIF, ISYM, EDIFF, EDIFFG, NCORE"
    cat -n INCAR

    echo "üìç Checking KPOINTS content:"
    echo "Note: Grid should match the relaxed cell."
    cat -n KPOINTS

    echo "üß™ Checking POTCAR (should contain COPYR):"
    head -n 10 POTCAR | cat -n

    echo "üñ•Ô∏è  Checking sub.vasp:"
    echo "Note: Check core number and parallel settings."
    cat -n sub.*

    echo "üìê Checking Y_CONSTR_CELL:"
    echo "Note: Related to ISIF, controls cell constraint precision."
    cat -n Y_*

    echo -e "üöÄ Ready to submit job in directory: ${BLUE}$(pwd)${NC}"
    # sbatch sub.*

    echo -e "üßπ Removing temporary directory: ${BLUE}$srcdir${NC}"
    rm -rf "$srcdir"

    echo -e "üìÑ Moving log file to: ${BLUE}$dirsurf/$logfile${NC}"
    mv "$myroot/$logfile" "$dirsurf/"
}

main "$@"
exit
