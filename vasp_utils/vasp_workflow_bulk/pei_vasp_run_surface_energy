#!/bin/bash
# J. Pei, 2024-11-01


main(){
    GREEN='\033[0;32m'
    YELLOW='\033[0;33m'
    BLUE='\033[0;34m'
    NC='\033[0m'

    if [[ "$1" == "--help" || "$1" == "-h" ]]; then
        echo -e "${GREEN}pei_vasp_run_surface_energy${NC} - Prepare surface vs bulk comparison job for VASP"
        echo ""
        echo -e "${YELLOW}Usage:${NC}"
        echo -e "  $0"
        echo ""
        echo -e "${YELLOW}Description:${NC}"
        echo -e "  - Source folder must be: ${BLUE}y_full_relax${NC}"
        echo -e "  - It must contain: ${GREEN}CONTCAR${NC}, and input files such as INCAR, KPOINTS, POTCAR"
        echo -e "  - A vacuum layer will be added in z-direction to construct surface model"
        echo ""
        echo -e "${YELLOW}Example:${NC}"
        echo -e "  $0"
        echo ""
        exit 0
    fi

    script_name=$(basename "$0")
    logfile="${script_name}.log"

    # üìú Log everything to file and terminal
    exec > >(tee "$logfile") 2>&1

    srcdir0=y_full_relax
    # bulk y_full_relax
    if [ -d "$srcdir0" ]; then
        sub_run_surface_energy "$1"
    else
        echo -e "‚ùå ${YELLOW}ERROR:${NC} No ${BLUE}$srcdir0${NC} found! Abort."
        exit 1
    fi
}

sub_run_surface_energy(){
    myroot=`pwd`
    srcdir=$myroot/y_full_relax_temp
    echo -e "üßπ ${YELLOW}Cleaning and preparing temp directory...${NC}"
    rm -rf $srcdir
    cp -r $srcdir0  $srcdir 
    cd $srcdir

    echo -e "${BLUE}===========================================================${NC}"
    echo -e "üìã ${YELLOW}INFO${NC}:"
    echo -e "üìÅ Using ${BLUE}$srcdir0${NC} as reference structure"
    echo -e "üìÑ Required files: ${GREEN}INCAR, KPOINTS, POTCAR, sub.*.neb, Y_*.neb${NC}"
    echo -e "üß± CONTCAR is used to extract lattice & atomic positions"
    echo -e "üìê Vacuum will be inserted along c-axis to build surface model"
    echo -e "üí° Tip: Check Cartesian format by running ${BLUE}pei_vasp_univ_cp_contcar_cartesian_poscar${NC} before this script"
    echo -e "${BLUE}===========================================================${NC}"


    myfile=./CONTCAR
    if [ -f "$myfile" ]; then
        echo -e "‚úÖ ${GREEN}$myfile exists.${NC}"
    else
        echo -e "üìã ${YELLOW}INFO:${NC} $myfile not found. Copying POSCAR ‚Üí CONTCAR"
        cp POSCAR CONTCAR
    fi

    echo -e "üìê Running ${BLUE}pei_vasp_univ_cp_contcar_cartesian_poscar${NC}..."
    pei_vasp_univ_cp_contcar_cartesian_poscar > /dev/null
    cp POSCAR CONTCAR

    echo -e "üîß Setting ISYM = 1 and ISIF = 2..."
    yin_vasp_univ_find_and_change -isym 1 
    yin_vasp_univ_find_and_change -isif 2
   
   #--------------------

    echo -e "üßæ Writing constraint file: ${GREEN}Y_CONSTR_LATT${NC}"
    echo -e "3\n0.0  0.0  0.0  0.0  0.0  0.0" > Y_CONSTR_LATT
    
    echo -e "üìè Reading lattice vectors..."
    a0=`sed -n '2,2p' $srcdir/CONTCAR | awk '{printf "%.16f", $1}'`

    a1=`sed -n '3,3p' $srcdir/CONTCAR | awk '{printf "%.16f", $1}'`
    a2=`sed -n '3,3p' $srcdir/CONTCAR | awk '{printf "%.16f", $2}'`
    a3=`sed -n '3,3p' $srcdir/CONTCAR | awk '{printf "%.16f", $3}'`
    
    b1=`sed -n '4,4p' $srcdir/CONTCAR | awk '{printf "%.16f", $1}'`
    b2=`sed -n '4,4p' $srcdir/CONTCAR | awk '{printf "%.16f", $2}'`
    b3=`sed -n '4,4p' $srcdir/CONTCAR | awk '{printf "%.16f", $3}'`
    
    c1=`sed -n '5,5p' $srcdir/CONTCAR | awk '{printf "%.16f", $1}'`
    c2=`sed -n '5,5p' $srcdir/CONTCAR | awk '{printf "%.16f", $2}'`
    c3=`sed -n '5,5p' $srcdir/CONTCAR | awk '{printf "%.16f", $3}'`

    echo -e "üìê a0 = $a0"
    echo -e "üìê a = $a1 $a2 $a3"
    echo -e "üìê b = $b1 $b2 $b3"
    echo -e "üìê c = $c1 $c2 $c3"
    cd ..

    #=====================
    echo -e "üîé Detecting Cartesian coordinates section..."
    start_line=$(grep -n "Cartesian" "$srcdir/CONTCAR" | cut -d: -f1)
    if [ -z "$start_line" ]; then
        echo -e "‚ùå ${YELLOW}ERROR:${NC} Cartesian coordinates not found. Maybe run peipath first?"
        exit 1
    fi
    start_line=$((start_line + 1))

    echo -e "üìä Extracting z-coordinates from atomic positions..."
    z_positions=($(awk -v start=$start_line 'NR >= start && NF > 0 {print $3} NF == 0 {exit}' "$srcdir/CONTCAR"))
    min_z=$(printf "%s\n" "${z_positions[@]}" | sort -n | head -n1)
    max_z=$(printf "%s\n" "${z_positions[@]}" | sort -n | tail -n1)
    z_range=$(echo "($max_z - $min_z)/11*12*$a0" | bc -l)
    interlayer=$(echo "$z_range/12" | bc -l)

    echo -e "üìê Thickness estimate: ${GREEN}$z_range √Ö${NC}"
    echo -e "üìê Evaluation: a0 √ó c3 = $(echo "$a0 * $c3" | bc -l)"

    #=====================

    dirsurf=y_surface_energy

    echo -e "üßπ Setting up output directory: ${BLUE}$dirsurf${NC}"
    rm -rI $dirsurf
    mkdir  $dirsurf
    cd     $dirsurf

    mkdir  y_dir
    cd     y_dir

    for i1 in 0 1 ;  do
        el=`echo "scale=16; $i1" | bc`  

        dirn=$(printf "%03d" "$el")
        echo -e "================ ${BLUE}Dir: $dirn${NC} ================"

        mkdir $dirn
        cd    $dirn

        cp $srcdir/{INCAR,KPOINTS,CONTCAR,POTCAR,sub.*,Y_*,CHGCAR} ./
        mv CONTCAR POSCAR

        if [ "$i1" -eq 0 ]; then
            echo -e "üß± ${GREEN}Bulk configuration${NC}"
            yin_vasp_univ_find_and_change  -isif  3
            echo -e "3\n0.0  0.0  0.0  0.0  0.0  0.0" > Y_CONSTR_LATT
        elif [ "$i1" -eq 1 ]; then
            echo -e "üß™ ${YELLOW}Surface configuration${NC}"
            echo -e "0.0\n0.0  0.0  0.0  0.0  0.0  0.0" > Y_CONSTR_LATT
	    rm CHGCAR 
            vacuum=20
            c3new=$(echo "scale=16; $c3 + ($vacuum - $interlayer) / $a0" | bc)

            lattc=`printf "%.16f  %.16f  %.16f"   "$c1" "$c2" "$c3new"`
            sed -i '5s/.*/'"    $lattc"'/'   ./POSCAR

            echo -e "üìê Updating z-coordinates to add vacuum layer..."
            new_positions=()
            for z in "${z_positions[@]}"; do
                new_z=$(echo "$z + $vacuum/$a0/2 - $min_z" | bc -l)
                new_positions+=("$new_z")
            done

            line_num=1
            z_index=0

            temp_file="POSCAR.temp"
            while IFS= read -r line; do 
                if (( line_num < start_line )); then
                    echo "$line" >> "$temp_file" 
                elif [[ line_num -ge start_line && -n "$line" ]]; then
                    read -r -a fields <<< "$line"
                    fields[2]=${new_positions[z_index]}
                    ((z_index++))    
                    echo "${fields[*]}" >> "$temp_file"
                elif [[ -z $line ]]; then
                    echo "$line" >> "$temp_file"
                    break
                fi
                ((line_num++))
            done < "POSCAR"
            mv $temp_file "POSCAR"
            echo -e "‚úÖ Updated POSCAR: Added ${GREEN}${vacuum} √Ö${NC} vacuum."
        fi

        echo -e "üöÄ Submitting job in: ${BLUE}$(pwd)${NC}"
        sbatch sub.*
        cd ..
    done

    echo -e "üßπ Cleaning up temp directory: ${BLUE}$srcdir${NC}"
    rm -rf $srcdir

    echo -e "üìÑ Moving log file to: ${BLUE}$dirsurf/$logfile${NC}"
    mv "$myroot/$logfile" "$dirsurf/"
}

main "$@"; exit
